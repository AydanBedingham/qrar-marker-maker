AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Parameters:
  ArtifactBucketName:
      Type: String
      Description: Name of the bucket that contains the fronted zip files
      Default: "temp-bucket123456"

  WebappVersion:
      Type: String
      Description: Version of the frontend to deploy
      Default: "LATEST"

Conditions:
  shouldUnzipToS3: !Not [ !Equals [!Ref ArtifactBucketName, ""]]

Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    
Resources:

  QrarApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-qrar-api
      StageName: Prod
      Auth:
        ApiKeyRequired: false

  ShortenUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-qrar-shorten-url-func
      CodeUri: ../backend/shorten-url
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        HelloGfmiApi:
          Type: Api
          Properties:
            Path: /api/shorten-url
            Method: POST
            RestApiId: !Ref QrarApi

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
        AccessControl: Private
        BucketName: !Sub ${AWS::StackName}-qrar-frontend-bucket
        Tags:
            - Key: description
              Value: "Stores Web files for QRAR Frontend"

  PlayBucket:
    Type: AWS::S3::Bucket
    Properties:
        AccessControl: Private
        BucketName: !Sub ${AWS::StackName}-qrar-play-bucket
        Tags:
            - Key: description
              Value: "Stores Web files for QRAR Play"

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Origin Access Identity for QRAR Frontend'

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FrontendBucket
                - /*

  PlayBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PlayBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref PlayBucket
                - /*

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3-frontend-bucket
            DomainName: !Sub '${FrontendBucket}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
          - Id: S3-play-bucket
            DomainName: !Sub '${PlayBucket}.s3.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
          - Id: Api-shorten-url
            DomainName: !Sub '${QrarApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: '/Prod'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        Comment: CloudFront Distribution for Qrar Frontend
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3-frontend-bucket
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: 'index.html'
        CustomErrorResponses:
        - ErrorCode: 403
          ResponsePagePath: "/index.html"
          ResponseCode: 200
        CacheBehaviors:
          - PathPattern: '/api*/*'
            TargetOriginId: Api-shorten-url
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: true
          - PathPattern: '/play*/*'
            TargetOriginId: S3-play-bucket
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            ForwardedValues:
              QueryString: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  DeployWebapp:
    Type: Custom::DeployWebApp
    Condition: shouldUnzipToS3
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt UnzipToS3.Arn
      DistributionId: !Ref FrontendDistribution
      DestinationBucket: !Ref FrontendBucket
      OriginBucket: !Ref ArtifactBucketName
      OriginKey: !Join [ '', [ 'webapp/webapp_', { Ref: WebappVersion }, '.zip' ] ]

  UnzipToS3Role:
    Type: "AWS::IAM::Role"
    Condition: shouldUnzipToS3
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
      Policies:
      - PolicyName: s3permissions
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: !Join [ '', [ 'arn:aws:s3:::', { Ref: ArtifactBucketName }, '/*' ] ]
          - Effect: Allow
            Action: [ 's3:GetObject', 's3:PutObject', 's3:DeleteObject' ]
            Resource: !Join [ '', [ { 'Fn::GetAtt': [ FrontendBucket, Arn ] }, '/*' ] ]
          - Effect: Allow
            Action: [ 'cloudfront:CreateInvalidation' ]
            Resource: '*'

  UnzipToS3:
    Type: "AWS::Lambda::Function"
    Condition: shouldUnzipToS3
    Properties:
      Runtime: python3.7
      Handler: index.handler
      Timeout: 300
      Role: !GetAtt UnzipToS3Role.Arn
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import boto3
          import logging
          import traceback
          from time import time
          import zipfile
          from io import BytesIO
          import mimetypes
          mimetypes.init()
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          def invalidate_cloudformation(cloudfront_id):
              cloudfront = boto3.client('cloudfront')
              cloudfront.create_invalidation(
                DistributionId = cloudfront_id,
                InvalidationBatch = {
                  'Paths': {
                    'Quantity': 1,
                    'Items': [ '/*' ],
                  },
                  'CallerReference': str(time()).replace(".", "")
                },
              )
          def handler(event, context):
            try:
              LOGGER.info('Event structure: %s', event)
              s3 = boto3.client('s3')                
              s3_resource = boto3.resource('s3')
              zip_file = event['ResourceProperties']['OriginKey']
              zip_bucket = event['ResourceProperties']['OriginBucket']
              unzip_bucket = event['ResourceProperties']['DestinationBucket']
              cloudfront_id = event['ResourceProperties']['DistributionId']
              zip_obj = s3_resource.Object(bucket_name=zip_bucket, key=zip_file)
              buffer = BytesIO(zip_obj.get()["Body"].read())
              z = zipfile.ZipFile(buffer)
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                for filename in z.namelist():
                    file_info = z.getinfo(filename)
                    if (file_info.is_dir()):
                      continue
                    mime_type = mimetypes.guess_type(filename)
                    args={
                      "Metadata": {
                        "from": f"{zip_file}"
                      }
                    }
                    if (mime_type[0]):
                      args['ContentType'] = mime_type[0]
                    s3_resource.meta.client.upload_fileobj(
                      z.open(filename),
                      Bucket=unzip_bucket,
                      Key=f'{filename}', 
                      ExtraArgs=args,
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{unzip_bucket}/{zip_file}')
              elif event['RequestType'] == 'Delete':
                for filename in z.namelist():
                  file_info = z.getinfo(filename)
                  if (file_info.is_dir()):
                    continue
                  object_in_s3 = s3_resource.Object(bucket_name=unzip_bucket, key=filename)
                  if (object_in_s3.metadata['from'] == zip_file):
                    s3_resource.meta.client.delete_object(
                      Bucket=unzip_bucket,
                      Key=f'{filename}',
                    )
                invalidate_cloudformation(cloudfront_id)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              LOGGER.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
              traceback.print_exc()

Outputs:

  FrontendDistributionId:
    Description: 'Frontend CloudFront Distribution Id'
    Value: !Ref FrontendDistribution

  PlayBucketName:
    Description: 'Play Bucket Name'
    Value: !Ref PlayBucket

  FrontendBucketName:
    Description: 'Play Bucket Name'
    Value: !Ref FrontendBucket

  FrontendUrl:
    Description: 'Frontend URL'
    Value: !GetAtt FrontendDistribution.DomainName

  ShortenUrlApiUrl:
    Description: 'Shorten Url Lambda Api'
    Value: !Sub 'https://${QrarApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/shorten-url'